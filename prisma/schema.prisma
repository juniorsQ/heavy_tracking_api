// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  name        String
  lastName    String?
  phoneNumber String?
  password    String
  isVerified  Boolean  @default(false)
  roleId      Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  role                UserRole? @relation(fields: [roleId], references: [id])
  driver              Driver?
  createdOrders       Order[] @relation("OrderCreatedBy")
  verificationCodes   VerificationCode[]
  passwordResetCodes  PasswordResetCode[]

  @@map("users")
}

model UserRole {
  id   Int    @id @default(autoincrement())
  name String @unique

  // Relations
  users User[]

  @@map("user_roles")
}

model Driver {
  id           Int     @id @default(autoincrement())
  truckNumber  String  @unique
  available    Boolean @default(true)
  userId       Int     @unique
  transportDivisionId Int

  // Relations
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  transportDivision TransportDivision @relation(fields: [transportDivisionId], references: [id])
  orders            Order[]

  @@map("drivers")
}

model TransportDivision {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  // Relations
  drivers Driver[]

  @@map("transport_divisions")
}

model Order {
  id              Int       @id @default(autoincrement())
  orderNumber     String    @unique
  bolNumber       String
  rate            Float
  instructions    String
  weight          Float
  assignmentDate  DateTime?
  status          OrderStatus @default(PENDING)
  material        String?
  startTime       String?
  endTime         String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Foreign Keys
  createdById     Int
  driverId        Int?
  routeId         Int?

  // Relations
  createdBy       User      @relation("OrderCreatedBy", fields: [createdById], references: [id])
  driver          Driver?   @relation(fields: [driverId], references: [id])
  route           Route?    @relation(fields: [routeId], references: [id])
  orderHasRoutes  OrderHasRoute[]
  deliveryConfirmations DeliveryConfirmation[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Route {
  id              Int       @id @default(autoincrement())
  miles           String
  routeTypeId     Int
  pickWorkPlantId Int
  dropWorkPlantId Int

  // Relations
  routeType       RouteType @relation(fields: [routeTypeId], references: [id])
  pickWorkPlant   WorkPlant @relation("PickWorkPlant", fields: [pickWorkPlantId], references: [id])
  dropWorkPlant   WorkPlant @relation("DropWorkPlant", fields: [dropWorkPlantId], references: [id])
  orders          Order[]
  orderHasRoutes  OrderHasRoute[]

  @@map("routes")
}

model RouteType {
  id   Int    @id @default(autoincrement())
  name String @unique

  // Relations
  routes Route[]

  @@map("route_types")
}

model WorkPlant {
  id        Int @id @default(autoincrement())
  name      String
  addressId Int

  // Relations
  address         Address @relation(fields: [addressId], references: [id])
  pickRoutes      Route[] @relation("PickWorkPlant")
  dropRoutes      Route[] @relation("DropWorkPlant")

  @@map("work_plants")
}

model Address {
  id     Int @id @default(autoincrement())
  address String
  zip    Int
  cityId Int

  // Relations
  city       City        @relation(fields: [cityId], references: [id])
  workPlants WorkPlant[]

  @@map("addresses")
}

model City {
  id    Int @id @default(autoincrement())
  name  String
  stateId Int

  // Relations
  state     State     @relation(fields: [stateId], references: [id])
  addresses Address[]

  @@map("cities")
}

model State {
  id   Int    @id @default(autoincrement())
  name String @unique

  // Relations
  cities City[]

  @@map("states")
}

model OrderHasRoute {
  id      Int @id @default(autoincrement())
  orderId Int
  routeId Int

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  route Route @relation(fields: [routeId], references: [id], onDelete: Cascade)

  @@unique([orderId, routeId])
  @@map("order_has_routes")
}

model DeliveryConfirmation {
  id          Int      @id @default(autoincrement())
  orderId     Int
  imagePath   String
  confirmedAt DateTime @default(now())
  notes       String?

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("delivery_confirmations")
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  userId    Int
  code      String
  type      VerificationType
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_codes")
}

model PasswordResetCode {
  id        Int      @id @default(autoincrement())
  userId    Int
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_codes")
}

enum VerificationType {
  EMAIL_VERIFICATION
  PASSWORD_RECOVERY
}

model MaterialType {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  @@map("material_types")
}

model TruckType {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  capacity    Float
  description String?

  @@map("truck_types")
}